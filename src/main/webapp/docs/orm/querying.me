A precise request for information retrieval from database is often refered to as _query_.
There are various ways you can query your data with Circumflex ORM:

  * using [select queries](#select), a neat object-oriented DSL for retrieving [records][record]
  as well as arbitrary [projections](#projection) with SQL-like syntax;
  * using the [Criteria API](#criteria), an alternative DSL for retrieving [records][record]
  with associations prefetching capabilities;
  * using native queries for executing vendor-specific queries for
  [records][record] or arbitrary [projections](#projection).

All data retrieval queries derive from the `SQLQuery[T]` class. It defines following methods
for query execution:

  * `list()` executes a query and returns `Seq[T]`;
  * `unique()` executes a query and returns `Option[T]`, an exception is thrown if more than one
  row is returned from database;
  * `resultSet[A](actions: ResultSet => A)` executes a query and passes JDBC `ResultSet` object
  to specified `actions` function, the result is determined by that function.

## Select Queries   {#select}

Select queries are used to retrieve [records][record] or arbitrary [projections](#projection)
with neat object-oriented DSL which closely resembles SQL syntax:

    // prepare relation nodes which will participate in query:     {.scala}
    val co = Country AS "co"
    val ci = City AS "ci"
    // prepare a query:
    val q = SELECT (co.*) FROM (co JOIN ci) WHERE (ci.name LIKE "Lausanne") ORDER_BY (co.name ASC)
    // execute a query:
    q.list    // returns Seq[Country]

The `Select` class provides functionality for select queries. It has following structure:

  * `SELECT` clause -- specifies a [projection](#projection) which determines
  the actual result of query execution;
  * `FROM` clause -- specifies [relation nodes](#node) which will participate in query;
  * `WHERE` clause -- specifies a [predicate](#predicate) which will be used by
  database to filter the records in result set;
  * `ORDER_BY` clause -- tells database how the result set should be [sorted](#order-by);
  * `GROUP_BY` clause -- specifies a subset of [projections](#projection) which will
  be used by database for [grouping](#group-by);
  * `HAVING` clause -- specifies additional [predicate](#predicate) which will be
  applied by database after [grouping](#group-by);
  * `LIMIT` clause and `OFFSET` clause -- tell database to return a subset of result set and
  specify it's boundaries;
  * [set operations](#set-ops) -- allow to combine the results of two or more [SQL queries](#sql).

## Relation Nodes   {#node}

`RelationNode` wraps a [`Relation`][relation] with an `alias` so that it can be a part of
`FROM` clause of database query.

Relation nodes are represented by the `RelationNode` class, they are created by calling the
`AS` method of [`Relation`][relation]:

    val co = Country AS "co"                                       {.scala}
    // fetch all countries
    SELECT (co.*) FROM (co) list

A handy `map` method can be used to make code a bit clearer:

    // fetch all countries                                         {.scala}
    (Country AS "CO").map(co => SELECT (co.*) FROM (co) list)

Relation nodes can be organized into _query trees_ using [joins](#join).

## Projections   {#projection}

_Projection_ reflects the type of data returned by query. Generally, it consists of expression
which can be understood in the `SELECT` clause of database and a logic to translate the
corresponding part of result set into specific type.

Projections are represented by the `Projection[T]` trait, where `T` denotes to the type of objects
which should be read from result set. Projections which only read from single database column
are refered to as _atomic projections_, they are subclassed from the `AtomicProjection` trait.
Projections which span across multiple database columns are refered to as _composite projections_,
they are subclassed from the `CompositeProjection` trait and consist of one or more
`subProjections`.

The most popular projection is `RecordProjection`, it is designed to retrieve [records][record].
The `*` method of [`RelationNode`](#node) returns a corresponding `RecordProjection` for relation.

You can also query single fields, `Field` is converted to `FieldProjection` implicitly when called
against `RelationNode`:

    val ci = City AS "ci"                                          {.scala}
    (SELECT (ci.id) FROM ci).list      // returns Seq[Long]
    (SELECT (ci.name) FROM ci).list    // returns Seq[String]

You can also query a pair of two projections with following syntax:

    val co = Country AS "co"                                       {.scala}
    val ci = City AS "ci"
    SELECT (ci.* -> co.*) FROM (co JOIN ci) list    // returns Seq[(Option[City], Option[Country])]

Another useful projection is `AliasMapProjection`:

    val co = Country AS "co"                                       {.scala}
    val ci = City AS "ci"
    SELECT(ci.* AS "city", co.* AS "country").FROM(co JOIN ci).list    // returns Seq[Map[String, Any]]

In this example the query returns a set of maps. Each map contains a `City` record under
`city` key and a `Country` record under the `country` key. The `SELECT` clause accepts
arbitrary quantity of projections.

You can even use arbitrary expression which your database understands as long as you specify
the expected type:

    SELECT(expr[java.util.Date]("current_timestamp")).unique   // returns Option[java.util.Date]  {.scala}

There are also some predefined projection helpers for your convenience:

  * `COUNT`;
  * `COUNT_DISTINCT`;
  * `MAX`;
  * `MIN`;
  * `SUM`;
  * `AVG`.

For example, following snippet will return the count of records in the `City` table:

    (City AS "ci").map(ci => SELECT(COUNT(ci.id)).FROM(ci).unique) {.scala}

You can easily implement your own projection helper. For example, if you use SQL `substring` function
frequently, you can &laquo;teach&raquo; Circumflex ORM to select substrings.

Here's the code you should place somewhere in your library (or utility singleton):

    object MyOrmUtils {                                            {.scala}
      def SUBSTR(f: TextField, from: Int = 0, length: Int = 0) = {
        var sql = "substring(" + f.name
        if (from > 0) sql += " from " + from
        if (length > 0) sql += " for " + length
        sql += ")"
        new ExpressionProjection[String](sql)
      }
    }

And here's the code to use it:

    import MyOrmUtils._                                            {.scala}
    (Country AS "co")
        .map(co => SELECT(SUBSTR(co.code, 1, 1)).FROM(co).list)   // returns Seq[String]

## Predicates   {#predicate}

_Predicate_ is a parameterized expression which is resolved by database into a boolean-value
function. Generally, predicates are used inside `WHERE` or `HAVING` clauses of SQL queries
to filter the rows in result set.

Predicates are represented by the `Predicate` class. The easiest way to compose a `Predicate`
instance is to use implicit conversion from `String` or `Field` to `SimpleExpressionHelper`
and call one of it's methods:

    SELECT (co.*) FROM (co) WHERE (co.name LIKE "Switz%")          {.scala}

Following helper methods are available in `SimpleExpressionHelper`:

<table width="100%">
  <thead>
    <tr>
      <th>Group</th>
      <th>Method</th>
      <th>SQL equivalent</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td rowspan="7">Comparison operators</td>
      <td><code>EQ(value: Any)</code></td>
      <td><code>= ?</code></td>
    </tr>
    <tr>
      <td><code>NE(value: Any)</code></td>
      <td><code>&lt;&gt; ?</code></td>
    </tr>
    <tr>
      <td><code>GT(value: Any)</code></td>
      <td><code>&gt; ?</code></td>
    </tr>
    <tr>
      <td><code>GE(value: Any)</code></td>
      <td><code>&gt;= ?</code></td>
    </tr>
    <tr>
      <td><code>LT(value: Any)</code></td>
      <td><code>&lt; ?</code></td>
    </tr>
    <tr>
      <td><code>LE(value: Any)</code></td>
      <td><code>&lt;= ?</code></td>
    </tr>
    <tr>
      <td><code>BETWEEN(lower: Any, upper: Any)</code></td>
      <td><code>BETWEEN ? AND ?</code></td>
    </tr>
    <tr>
      <td rowspan="2">Null handling</td>
      <td><code>IS_NULL</code></td>
      <td><code>IS NULL</code></td>
    </tr>
    <tr>
      <td><code>IS_NOT_NULL</code></td>
      <td><code>IS NOT NULL</code></td>
    </tr>
    <tr>
      <td rowspan="14">Subqueries</td>
      <td><code>IN(query: SQLQuery[_])</code></td>
      <td><code>IN (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>NOT_IN(query: SQLQuery[_])</code></td>
      <td><code>NOT IN (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>EQ_ALL(query: SQLQuery[_])</code></td>
      <td><code>= ALL (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>NE_ALL(query: SQLQuery[_])</code></td>
      <td><code>&lt;&gt; ALL (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>GT_ALL(query: SQLQuery[_])</code></td>
      <td><code>&gt; ALL (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>GE_ALL(query: SQLQuery[_])</code></td>
      <td><code>&gt;= ALL (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>LT_ALL(query: SQLQuery[_])</code></td>
      <td><code>&lt; ALL (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>LE_ALL(query: SQLQuery[_])</code></td>
      <td><code>&lt;= ALL (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>EQ_SOME(query: SQLQuery[_])</code></td>
      <td><code>= SOME (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>NE_SOME(query: SQLQuery[_])</code></td>
      <td><code>&lt;&gt; SOME (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>GT_SOME(query: SQLQuery[_])</code></td>
      <td><code>&gt; SOME (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>GE_SOME(query: SQLQuery[_])</code></td>
      <td><code>&gt;= SOME (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>LT_SOME(query: SQLQuery[_])</code></td>
      <td><code>&lt; SOME (SELECT ...)</code></td>
    </tr>
    <tr>
      <td><code>LE_SOME(query: SQLQuery[_])</code></td>
      <td><code>&lt;= SOME (SELECT ...)</code></td>
    </tr>
    <tr>
      <td rowspan="3">Miscellaneous</td>
      <td><code>LIKE(value: Any)</code></td>
      <td><code>LIKE ?</code></td>
    </tr>
    <tr>
      <td><code>ILIKE(value: Any)</code></td>
      <td><code>ILIKE ?</code></td>
    </tr>
    <tr>
      <td><code>IN(params: Any*)</code></td>
      <td><code>IN (?, ?, ...)</code></td>
    </tr>
  </tbody>
</table>

You can combine several predicates into `AggregatePredicate` using either `OR` or `AND` methods:

    AND(co.name LIKE "Switz%", co.code EQ "ch")                    {.scala}
    // or in infix notation:
    (co.name LIKE "Switz%") OR (co.code EQ "ch")

You can negotiate a predicate using the `NOT` method:

    NOT(co.name LIKE "Switz%")                                     {.scala}

`String` values are implicitly converted into `SimpleExpression` predicate without parameters:

    SELECT (co.*) FROM (co) WHERE ("co.code like 'ch'"))           {.scala}

You can also use `prepareExpr` to compose a custom expression with parameters:

    prepareExpr("co.name like :name or co.code like :code", "name" -> "Switz%", "code" -> "ch")     {.scala}

## Ordering   {#order-by}

Ordering expressions appear in `ORDER_BY` clause of `Select`, they determine how rows in
result set will be sorted. The easiest way to specify ordering expressions is to use implicit
convertions from `String` or `Field` into `Order`:

    SELECT (co.*) FROM (co) ORDER_BY (co.name)                     {.scala}

You can also add either `ASC` or `DESC` ordering specificator to explicitly set the direction of
sorting:

    SELECT (co.*) FROM (co) ORDER_BY (co.name ASC)                  {.scala}

If no specificator given, ascending sorting is assumed by default.

## Joins   {#join}

_Joins_ are used to combine records from two or more relations within a query.

Joins concept is a part of [relational algebra][rel-algebra-wiki]. If you are not familiar with
joins in relational databases, consider spending some time to learn a bit about them. A good place
to start will be the [Join_(SQL) article on Wikipedia][joins-wiki].

Joins allow you to build queries which span across several associated relations:

    val co = Country AS "co"                                       {.scala}
    val ci = City AS "ci"
    // find cities by the name of their corresponding countries:
    SELECT (ci.*) FROM (ci JOIN co) WHERE (co.name LIKE 'Switz%')

As the example above shows, joins are intended to be used in the `FROM` clause of query.
The result of calling the `JOIN` method is an instance of `JoinNode` class:

    val co2ci = (Country AS "co") JOIN (City AS "ci")   // JoinNode[Country, City]      {.scala}

Every `JoinNode` has it's left side and right side (`co JOIN ci` is *not* equivalent to
`ci JOIN co`).

### Left Associativity    {#joins-left-ass}

An important thing to know is that the join operation is *left-associative*: if join
is applied to `JoinNode` instance, the operation will be delegated to the `left` side
of `JoinNode`.

To illustrate this, let's take three associated tables, `Country`, `City` and `Street`:

    val co = Country AS "co"                                       {.scala}
    val ci = City AS "ci"
    val st = Street AS "st"

We want to join them in following order: `Country` -> (`City` -> `Street`).
Since join operation is left-associative, we need extra parentheses:

    co JOIN (ci JOIN st)                                           {.scala}

Now let's join the same tables in following order: (`City` -> `Street`) -> `Country`. In this
case the parentheses can be omitted:

    ci JOIN st JOIN co                                             {.scala}

### Joining Predicate    {#joins-predicate}

By default Circumflex ORM will try to determine joining predicate (the `ON` subclause)
by searching the [associations][association] between relations.

Let's say we have two associated relations, `Country` and `City`.
We can use implicit joins between `Country` and `City`:

    Country AS "co" JOIN (City AS "ci")                            {.scala}
    // country AS co LEFT JOIN city AS ci ON ci.country_code = co.code
    City AS "ci" JOIN (Country AS "co")
    // city AS ci LEFT JOIN country AS co ON ci.country_code = co.code

However, if no explicit association exist between relations (or if they are ambiguous), you
may need to specify the join predicate explicitly:

    ci.JOIN(co).ON("ci.country_code = co.code")                    {.scala}

### Join Types    {#joins-type}

Like in SQL, joins can be of several types. Depending on the type of join, rows which do not
match the joining predicate will be eliminated from one of the sides of join. Following join
types are available:

  * `INNER` joins eliminate unmatched rows from both sides;
  * `LEFT` joins return all matched rows plus one copy for each row in the left side relation
  for which there was no matching right-hand row (extended with `NULL`s on the right);
  * `RIGHT` joins, conversely, return all matched rows plus one copy for each row in the right side
  relation for which there was no matching right-hand row (extended with `NULL`s on the left);
  * `FULL` joins return all the joined rows, plus one row for each unmatched left-hand row
  (extended with `NULL`s on the right), plus one row for each unmatched right-hand row
  (extended with `NULL`s on the left).;
  * cross joins are achieved by passing multiple `RelationNode` arguments to `FROM`, they produce
   the Cartesian product of records, no join conditions are applied to them.

If no join type specified explicitly, `LEFT` join is assumed by default.

You can specify the type of join by passing an argument to the `JOIN` method:

    (Country AS "co").JOIN(City AS "ci", INNER)                    {.scala}

Or you may call one of specific methods instead:

    Country AS "co" INNER_JOIN (City AS "ci")                      {.scala}
    Country AS "co" LEFT_JOIN (City AS "ci")
    Country AS "co" RIGHT_JOIN (City AS "ci")
    Country AS "co" FULL_JOIN (City AS "ci")

## Grouping & Having   {#group-by}

A query can optionally condense into a single row all selected rows that share the same value for
a subset of query [projections](#projection). Such queries are often refered to as _grouping queries_
and the projections are usually refered to as _grouping projections_.

Grouping queries are built using the `GROUP_BY` clause:

    SELECT (co.*) FROM co GROUP_BY (co.*)                          {.scala}

As the example above shows, grouping projections are specified as arguments to the `GROUP_BY`
method.

Grouping queries are often used in conjunction with aggregate functions. If aggregate functions
are used, they are computed across all rows making up each group, producing separate value for
each group, whereas without `GROUP_BY` an aggregate produces a single value computed across all
the selected rows:

    val co = Country AS "co"                                       {.scala}
    val ci = City AS "ci"
    // how many cities correspond to each selected country?
    SELECT (co.* -> COUNT(ci.id)) FROM (co JOIN ci) GROUP_BY (co.*)

Groups can be optionally filtered using the `HAVING` clause. It accepts a [predicate](#predicate):

    SELECT (co.* -> COUNT(ci.id)) FROM (co JOIN ci) GROUP_BY (co.*) HAVING (co.code LIKE "c_")  {.scala}

Note that `HAVING` is different from `WHERE`: `WHERE` filters individual rows before the
application of `GROUP_BY`, while `HAVING` filters group rows created by `GROUP_BY`.

## Limit & Offset   {#limit-offset}

The `LIMIT` clause specifies the maximum number of rows a query will return:

    // select 10 first countries:                                  {.scala}
    SELECT (co.*) FROM co LIMIT 10

The `OFFSET` clause specifies the number of rows to skip before starting to return results.
When both are specified, the amount of rows specified in the `OFFSET` clause is skipped before
starting to count the maximum amount of returned rows specified in the `LIMIT` clause:

    // select 5 countries starting from 10th:                      {.scala}
    SELECT (co.*) FROM co LIMIT 5 OFFSET 10

Note that query planners in database engines often take `LIMIT` and `OFFSET` into account when
generating a query plan, so you are very likely to get different row orders for different
`LIMIT`/`OFFSET` values. Thus, you should use explicit [ordering](#order-by) to achieve
consistent and predictable results when selecting different subsets of a query result with
`LIMIT`/`OFFSET`.

## Union, Intersect & Except   {#set-ops}

Most database engines allow to comine the results of two queries using the _set operations_.
Following set operations are available:

  * `UNION` -- appends the result of one query to another, eliminating duplicate rows from
  its result;
  * `UNION_ALL` -- same as `UNION`, but leaves duplicate rows in result set;
  * `INTERSECT` -- returns all rows that are in the result of both queries, duplicate rows are
  eliminated;
  * `INTERSECT_ALL` -- same as `INTERSECT`, but no duplicate rows are eliminated;
  * `EXCEPT` -- returns all rows that are in the result of left-hand query, but not in the result
  of right-hand query; again, the duplicates are eliminated;
  * `EXCEPT_ALL` -- same as `EXCEPT`, but duplicates are left in the result set.

The syntax for using set operations is:

    // select the names of both countries and cities in a single result set:    {.scala}
    SELECT (co.name) FROM co UNION (SELECT (ci.name) FROM ci)

Set operations can also be nested and chained:

    q1 INTERSECT q2 EXCEPT q3                                      {.scala}
    (q1 UNION q2) INTERSECT q3

The queries combined using set operations should have matching [projections](#projection).
Following will not compile:

    SELECT (co.*) FROM co UNION (SELECT (ci.*) FROM ci)            {.scala}

## Reusing Query Objects   {#query-reuse}

When working with data-centric applications, you often need the same query to be executed with
different parameters. The most obvious solution is to build `Query` objects dynamically:

    object Country extends Table[String, Country] {                {.scala}
      def findByCode(code: String): Option[Country] = (this AS "co").map(co =>
          SELECT (co.*) FROM co WHERE (co.code LIKE code) unique)
    }

However, you can use _named parameters_ to reuse the same `Query` object:

    object Country extends Table[String, Country] {                {.scala}
      val co = AS("co")
      val byCode = SELECT (co.*) FROM co WHERE (co.code LIKE ":code")
      def findByCode(c: String): Option[Country] = byCode.set("code", c).unique
    }

## Criteria API   {#criteria}

Most (if not all) of your data retrieval queries will be focused to retrieve only one type of
[records][record]. _Criteria API_ aims to minimize your effort on writing such queries. Following
snippet shows three equivalents of the same query:

    // Select query:                                               {.scala}
    (Country AS "co").map(co => SELECT (co.*) FROM (co) WHERE (co.name LIKE "Sw%") list)
    // Criteria query:
    Country.criteria.add(Country.name LIKE "Sw%").list
    // or with RelationNode:
    co.criteria.add(co.name LIKE "Sw%").list

As you can see, `Criteria` queries are more compact because boilerplate `SELECT` and `FROM` clauses
are omitted.

But aside from shortening the syntax, Criteria API offers unique functionality --
[associations prefetching](#prefetch), which can greatly speed up your application when working
with graphs of associated objects.

The `Criteria[R]` object has following methods for execution:

  * `list()` executes a query and returns `Seq[R]`;
  * `unique()` executes a query and returns `Option[R]`, an exception is thrown if more than one
  row is returned from database;
  * `mkSelect` transforms a `Criteria` into the [Select query](#select);
  * `mkUpdate` transforms a `Criteria` into the [Update query](#update-delete);
  * `mkDelete` transforms a `Criteria` into the [Delete query](#update-delete);
  * `toString` shows query tree for debugging.

You can use [predicates](#predicate) to narrow the result set. Unlike [`Select` queries](#select),
predicates are added to `Criteria` object using the `add` method and then are assembled into the
conjunction:

    co.criteria                                                    {.scala}
        .add(co.name LIKE "Sw%")
        .add(co.code LIKE "ch")
        .list

You can apply [ordering](#order-by) using the `addOrder` method:

    co.criteria.addOrder(co.name).addOrder(co.code).list           {.scala}

Also you can add one or more [associated][association] [relations][relation] to the query plan
using the `addJoin` method so that you can specify constraints upon them:

    val co = Country AS "co"                                       {.scala}
    val ci = City AS "ci"
    co.criteria.addJoin(ci).add(ci.name LIKE "Lausanne").list

Automatic joins are used to update query plan properly. There is no limitation on
quantity or depth of joined relations. However, some database vendors have limitations on maximum
size of queries or maximum amount of relations participating in a single query.

One serious limitation of Criteria API is that it does not support `LIMIT` and `OFFSET` clauses
due to the fact that [association prefetching](#prefetch) normally causes result set to yield
more than one row per record. You can still use `LIMIT` and `OFFSET` with
[SQL queries](#limit-offset);

### Prefetching Associations   {#prefetch}

When working with [associated][association] [records][record] you often need a whole graph of
associations to be fetched.

Normally associations are fetched eagerly first time they are accessed, but when it is done for
every record in a possibly big result set, it would result in significant performance degradation
(see the [n + 1 selects problem explained][n+1] blogpost).

With Criteria API you have an option to fetch as many associations as you want in a single query.
This technique is refered to as _associations prefetching_ or _eager fetching_.

To understand how associations prefetching works, let's take a look at the following domain model
sample:

    class Country extends Record[String, Country] {                {.scala}
      def PRIMARY_KEY = code
      def relation = Country
      val code = "code" VARCHAR(2) DEFAULT("'ch'")
      val name = "name" TEXT
      def cities = inverseMany(City.country)
    }

    object Country extends Country with Table[String, Country]

    class City extends Record[Long, City] with IdentityGenerator[Long, City] {
      def PRIMARY_KEY = id
      def relation = City
      val id = "id".LONG.NOT_NULL.AUTO_INCREMENT
      val name = "name" TEXT
      val country = "country_code".VARCHAR(2).NOT_NULL
          .REFERENCES(Country).ON_DELETE(CASCADE).ON_UPDATE(CASCADE)
    }

    object City extends City with Table[Long, City]

You see two [relations][relation], `Country` and `City`. Each city has one [associated][association]
`country`, and, conversely, each country has a list of corresponding `cities`.

Now you wish to fetch all cities with their corresponding countries in a single query:

    val cities = City.criteria.prefetch(City.country).list         {.scala}
    cities.foreach(c => println(c.country()))   // no selects issued

The example above shows the prefetching for straight associations. Same logic applies to inverse
associations prefetching, for example, fetching all countries with their corresponding cities:

    val countries = Country.criteria.prefetch(City.country).list   {.scala}
    countries.foreach(c => println(c.cities()))   // no selects issued

Okay. Now we totally hear you saying: "How is that really possible?" -- so let's explain a bit.
Each `Criteria` object maintains it's own tree of associations, which is used to form the `FROM`
clause of the query (using automatic left-joins) and, eventually, to parse the
result set. The data from result set is parsed into chunks and loaded into
transaction-scoped cache, which is subsequently used by associations and inverse
associations to avoid unnecessary selects.

There is no limitation on quantity or depth of prefetches. However, some database vendors
have limitations on maximum size of queries or maximum amount of relations participating in a
single query.

  [record]:            [[lonk:/docs/orm/ddl.html#record]]
  [relation]:          [[link:/docs/orm/ddl.html#relation]]
  [association]:       [[link:/docs/orm/ddl.html#association]]
 

