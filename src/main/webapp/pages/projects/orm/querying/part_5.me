# ORM: Querying

## Union, Intersect & Except   {#set-ops}

Most database engines allow to comine the results of two queries using the _set operations_.
Following set operations are available:

  * `UNION` -- appends the result of one query to another, eliminating duplicate rows from
  its result;
  * `UNION_ALL` -- same as `UNION`, but leaves duplicate rows in result set;
  * `INTERSECT` -- returns all rows that are in the result of both queries, duplicate rows are
  eliminated;
  * `INTERSECT_ALL` -- same as `INTERSECT`, but no duplicate rows are eliminated;
  * `EXCEPT` -- returns all rows that are in the result of left-hand query, but not in the result
  of right-hand query; again, the duplicates are eliminated;
  * `EXCEPT_ALL` -- same as `EXCEPT`, but duplicates are left in the result set.

The syntax for using set operations is:

    // select the names of both countries and cities in a single result set:    {.scala}
    SELECT (co.name) FROM co UNION (SELECT (ci.name) FROM ci)

Set operations can also be nested and chained:

    q1 INTERSECT q2 EXCEPT q3                                      {.scala}
    (q1 UNION q2) INTERSECT q3

The queries combined using set operations should have matching
[projections](/products/orm/querying/part_1.html#projection).
Following will not compile:

    SELECT (co.*) FROM co UNION (SELECT (ci.*) FROM ci)            {.scala}

