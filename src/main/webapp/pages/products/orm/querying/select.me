# ORM: Querying

## Select Queries   {#select}

Select queries are used to retrieve [records](/products/orm/ddl/part_1.html#record) or arbitrary
[projections](/products/orm/querying/part_1.html#projection)
with neat object-oriented DSL which closely resembles SQL syntax:

    // prepare relation nodes which will participate in query:     {.scala}
    val co = Country AS "co"
    val ci = City AS "ci"
    // prepare a query:
    val q = SELECT (co.*) FROM (co JOIN ci) WHERE (ci.name LIKE "Lausanne") ORDER_BY (co.name ASC)
    // execute a query:
    q.list    // returns Seq[Country]

The `Select` class provides functionality for select queries. It has following structure:

  * `SELECT` clause -- specifies a [projection](/products/orm/querying/part_1.html#projection) which determines
  the actual result of query execution;
  * `FROM` clause -- specifies [relation nodes](/products/orm/querying/part_1.html#node) which
  will participate in query;
  * `WHERE` clause -- specifies a [predicate](/products/orm/querying/part_2.html#predicate) which will be used by
  database to filter the records in result set;
  * `ORDER_BY` clause -- tells database how the result set should be
  [sorted](/products/orm/querying/part_4.html#order-by);
  * `GROUP_BY` clause -- specifies a subset of [projections](/products/orm/querying/part_1.html#projection) which
  will be used by database for [grouping](/orm/querying/part_4.html#group-by);
  * `HAVING` clause -- specifies additional [predicate](/products/orm/querying/part_2.html#predicate) which will be
  applied by database after [grouping](/products/orm/querying/part_4.html#group-by);
  * `LIMIT` clause and `OFFSET` clause -- tell database to return a subset of result set and
  specify it's boundaries;
  * [set operations](/orm/querying/part_5.html#set-ops) -- allow to combine the results of two or more [SQL queries](#sql).
